/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    tapping_term_ms = <420>;
};

 / {
    combos {
        compatible = "zmk,combos";
        combo_ent {
            timeout-ms = <50>;
            key-positions = <4 7>;
            bindings = <&kp ENTER>;
        };
        combo_quote {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp SQT>;
        };
        combo_ques {
            timeout-ms = <50>;
            key-positions = <28 31>;
            bindings = <&kp QUESTION>;
        };
        combo_dquote {
            timeout-ms = <50>;
            key-positions = <27 31>;
            bindings = <&kp DQT>;
        };
        combo_col {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&kp COLON>;
        };
        combo_unds {
            timeout-ms = <50>;
            key-positions = <29 30>;
            bindings = <&kp UNDER>;
        };
        combo_mins {
            timeout-ms = <50>;
            key-positions = <16 19>;
            bindings = <&kp MINUS>; 
        };
    };
}; 


/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   &trans       &kp Q        &kp W &kp E &kp R &kp T         &kp Y &kp U  &kp I     &kp O   &kp P           &kp RG(RS(N4))
   &kp LG(TAB)  &mt LSHFT A  &kp S &kp D &kp F &kp G         &kp H &kp J  &kp K     &kp L   &mt LSHFT SEMI  &cp PLAY
   &trans       &mt LCMD Z   &kp X &kp C &kp V &kp B         &kp N &kp M  &kp COMMA &kp DOT &mt RCMD FSLH   &kp RG(S)
                             &kp LALT &mo 1 &kp SPACE        &kp BSPC &mo 2 &kp RALT
                        >;
                };
                lower_layer {
                        bindings = <
   &bt BT_CLR &kp N1         &kp N2   &kp N3     &kp N4     &kp N5         &kp N6    &kp N7        &kp N8     &kp N9    &kp N0         &cp C_NEXT
   &trans     &mt LSHFT EXCL &kp AT   &kp HASH   &kp DLLR   &kp PRCNT      &kp CARET &kp AMPERSAND &kp ASTRK  &kp LPAR  &mt RSHFT RPAR &trans
   &trans     &mt LCMD ESC   &kp TAB  &kp CAPS   &kp TILDE  &kp GRAVE      &kp LEFT  &kp UP        &kp DOWN   &kp RIGHT &kp RCMD         &cp C_PREV
                                            &kp LALT &trans &kp SPACE      &cp C_VOL_UP &trans &kp RALT
                        >;
                };

                raise_layer {
                        bindings = <
   &trans   &kp MINUS       &kp EQUAL &kp LBKT &kp RBKT &kp BSLH     &trans &trans &trans &trans &trans         &trans 
   &trans   &mt LSHFT UNDER &kp PLUS  &kp LBRC &kp RBRC &kp PIPE     &trans &trans &trans &trans &kp LSHFT      &trans
   &trans   &mt LCMD F1     &kp F2    &kp F3   &kp F4   &kp F5       &kp F6 &kp F7 &kp F8 &kp F9 &mt RCMD F10   &trans
                                   &kp LGUI &trans &cp C_VOL_DN      &kp BSPC &trans &kp RALT
                        >;
                };
        };
};